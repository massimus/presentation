#use File::Slurp;
use utf8;
use Modern::Perl;

# use charnames ':full';
binmode( STDOUT, ":utf8" );
use HTML::Strip;
use HTML::Entities;

use WWW::Mechanize::Firefox;
use File::Slurp;
use File::Spec::Functions qw(catdir catfile);
use POSIX ();
use English qw(-no_match_vars);
use Carp;
use File::Basename;
use YAML::Tiny;
use DDP;
use AnyEvent;

&main();

sub main {
    my $url = 'http://www.translate.ru/';

    # my $fname = basename($url);
    my %is_download = ();
    my $firemech;
    my $magic = 'PROMT';
    # use Test::More;
    # plan tests => 2;

    # my $myurl       = 'http://google.com';
    my $firefox_bin = 'C:/Program Files/Mozilla Firefox/firefox.exe';

#################### Open URL #########################
## creating firefox obj
    $firemech = WWW::Mechanize::Firefox->new(
        launch    => $firefox_bin        
    );

    # open page/url

    # diag $_->{title} for $firemech->application->openTabs();
    # Now try to connect to "our" now closed tab
    my $lived = eval {
        $firemech = WWW::Mechanize::Firefox->new(
            autodie => 1,
            tab     => qr/$magic/,
        );
        1;
    };
    my $err = $@;
	
	if (!defined $lived){
	 ($firemech) = WWW::Mechanize::Firefox->new( tab => 'current', );
    $firemech->get($url);	
	}
    # is $lived, undef, 'We died trying to connect to a non-existing tab';

	
    # Something within the eval {} block above kills $@. Likely, some destructor
    # somewhere, maybe in MozRepl::RemoteObject.
    # like $err, q{/Couldn't find a tab matching/},
      # 'We got the correct error message';

    try {
    $firemech = WWW::Mechanize::Firefox->new(
    tab => qr/PROMT/,
    );
    }catch {
    warn "caught error: $_";    # not $@
    given ($_) {
    when (/Couldn.*a tab matching/){
    ($firemech) = WWW::Mechanize::Firefox->new( tab => 'current', );
    $firemech->get($url);
    };
    when (/Unauthorized/){fill_jira($firemech) };
    default { say "Another arror" }
    }
    };

     die "Cannot connect to $url\n" if !$firemech->success();
     fill_jira($firemech);
}

sub fill_jira {
    my $mech          = shift;
    my $submit_button = 'id="bTranslate"';
    wait_for( $mech, $submit_button );

    my $test_sentence = <<END
This tutorial assumes that the make program that Perl is configured to
use is called C<make>.  Instead of running "make" in the examples that
follow, you may have to substitute whatever make program Perl has been
configured to use.  Running B<perl -V:make> should tell you what it is.
END
      ;
    $mech->field( 'ctl00$SiteContent$sourceText' => $test_sentence );
    $mech->eval_in_page(<<'JS');
key="";
var globalJsonVar;
 uTrType = "";
    visitLink = false;
    closeTranslationLinks();
    var dir = GetDir();
    var text = rtrim($("#ctl00_SiteContent_sourceText").val());
    text = encodeURIComponent(text).split("'").join("\\'");
    var templ = $("#template").val();
  $.ajax({
        type: "POST",
        contentType: "application/json; charset=utf-8",
        url: "/services/TranslationService.asmx/GetTranslateNew",
        data: "{ dirCode:'" + dir + "', template:'" + templ + "', text:'" + text + "', lang:'ru', limit:" + maxlen + ",useAutoDetect:true, key:'" + key + "', ts:'" + TS + "',tid:'',IsMobile:false}",
        dataType: "json",
        success: function (res) {
 $("#editResult_test")[0].innerHTML=res.result;
        },
        error: function (XMLHttpRequest, textStatus, errorThrown) {
            GetErrMsg("К сожалению, сервис временно недоступен. Попробуйте повторить запрос позже.");
            trDirCode = "";
        }
    });
JS
    sleep 0.5;
    my ( $value, $type ) = $mech->eval(<<'JS');
$("#editResult_test")[0].innerHTML;
JS

    say decode_entities($value);
}

sub wait_for {
    my $mech    = shift;
    my $choice  = shift;
    my $retries = 10;
    while ( $retries--
        and !$mech->is_visible( xpath => '//*[@' . ${choice} . ']' ) )
    {
        sleep 1;
    }
    die "Timeout" if 0 > $retries;

}
